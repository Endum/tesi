ea.experiment(
  runs = (randomGenerator = (seed = [1:1:10]) * [ea.rg.defaultRG()]) *
  (problem = (qFunction = [
    s.taskRunner(task = s.task.locomotion(terrain = s.t.flat(); duration = 20));
    s.taskRunner(task = s.task.locomotion(terrain = s.t.hilly(); duration = 20))
  ]) * [
    ea.p.totalOrder(
      cFunction = s.task.locomotion.xVelocity();
      type = maximize
    )
  ]) * (solver = (mapper = (target = (body = (shape = [
    s.a.vsr.s.worm(w = 8; h = 3);
    s.a.vsr.s.free(s = "111110-110011");
    s.a.vsr.s.worm(w = 5; h = 2)
  ]) * [
    s.a.vsr.gridBody(      
      sensorizingFunction = s.a.vsr.sf.uniform(
        sensors = [s.s.ar(); s.s.rv(a = 0); s.s.rv(a = 90); s.s.a()]
      )
    )
  ]) * [
    s.a.distributedNumGridVSR(
      signals = 2;
      function = ds.num.mlp()
    )]
  ) * [er.m.numericalParametrizedHomoBrains()]
  ) * [ea.s.doubleStringGa(nEval = 1000; nPop = 50)]
  ) * [ea.run()];
  listeners = [
    ea.l.tui(
      functions = [
        ea.nf.bestFitness(f = ea.nf.f(outerF = s.task.l.xVelocity(); s = "%5.2f"));
        ea.nf.fitnessHist(f = ea.nf.f(outerF = s.task.l.xVelocity()))
      ];
      plots = [
        ea.plot.fitness(x = ea.nf.progress(); f = ea.nf.f(outerF = s.task.l.xVelocity()); sort = max; minY = 0; maxX = 1)
      ]
    )
  ]
)