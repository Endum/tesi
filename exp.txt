ea.experiment(
  runs = 
    (randomGenerator = 
      (seed = [1:1:1])
      *
      [ea.rg.defaultRG()]
    )
    *
    [ea.run(
      solver = ea.s.doubleStringGa(
        mapper = er.m.numericalParametrizedHeteroBrains(
          target = s.a.distributedNumGridVSR(
            body = s.a.vsr.gridBody(
              sensorizingFunction = s.a.vsr.sf.directional(
                headSensors = [s.s.sin(f = 0); s.s.d(a = -15; r = 5)];
                nSensors = [s.s.ar(); s.s.rv(a = 0); s.s.rv(a = 90)];
                sSensors = [s.s.d(a = -90)]
              );
              shape = s.a.vsr.s.biped(w = 4; h = 3)
            );
            function = ds.num.outStepped(
              stepT = 0.2;
              inner = ds.num.mlp()
            );
            signals = 2
          )
        );
        nEval = 10000;
        nPop = 25
      );
      problem = ea.p.totalOrder(
        qFunction = s.taskRunner(task = s.task.locomotion(duration = 15));
        cFunction = s.task.locomotion.xDistance();
        type = maximize
      )
    )
  ];
  listeners = [
    ea.l.tui(
      functions = [
        ea.nf.size(f = ea.nf.genotype(individual = ea.nf.best()); s = "%5d");
        ea.nf.bestFitness(f = ea.nf.f(outerF = s.task.l.xDistance(); s = "%5.2f"));
        ea.nf.fitnessHist(f = ea.nf.f(outerF = s.task.l.xDistance()))
      ];
      plots = [
        ea.plot.fitness(x = ea.nf.progress(); f = ea.nf.f(outerF = s.task.l.xDistance()); sort = max; minY = 0; maxX = 1)
      ]
    );
    ea.l.bestCsv(
      filePath = "best.csv";
      functions = [
        ea.nf.bestFitness(f = ea.nf.f(outerF = s.task.l.xDistance(); s = "%5.2f"));
        ea.nf.base64(f = ea.nf.genotype(individual = ea.nf.best()))
      ];
      runKeys = ["randomGenerator.seed"; "solver.mapper.target.body.shape"; "solver.mapper.target.function"]
    );
    evorobots.listener.videoSaver(videos = [
      er.video(task = s.task.locomotion(terrain = sim.terrain.downhill(); duration = 30); filePathTemplate = "best_downhill.mp4");
      er.video(task = s.task.locomotion(terrain = sim.terrain.flat(); duration = 30); filePathTemplate = "best_flat.mp4");
      er.video(task = s.task.locomotion(terrain = sim.terrain.uphill(); duration = 30); filePathTemplate = "best_uphill.mp4")
    ])
  ]
)